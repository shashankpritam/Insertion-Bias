ANErow = Arow
ANEcolumn = 1
} else {
ANErow = Arow
ANEcolumn = Acolumn+1}
#print(c(Arow, Acolumn, ANEcolumn))
AO = occupancy.function(Arow, Acolumn)
SO = occupancy.function(ANSrow, ANScolumn)
WO = occupancy.function(ANWrow, ANWcolumn)
NO = occupancy.function(ANNrow, ANNcolumn)
EO = occupancy.function(ANErow, ANEcolumn)
#print(c(AO, SO, WO, NO, EO))
CAT = color.function(Arow, Acolumn)
CST = color.function(ANSrow, ANScolumn)
CWT = color.function(ANWrow, ANWcolumn)
CNT = color.function(ANNrow, ANNcolumn)
CET = color.function(ANErow, ANEcolumn)
#print(c(CST, CWT, CNT, CET))
AT = tags.function(Arow, Acolumn)
ST = tags.function(ANSrow, ANScolumn)
WT = tags.function(ANWrow, ANWcolumn)
NT = tags.function(ANNrow, ANNcolumn)
ET = tags.function(ANErow, ANEcolumn)
interaction.function <- function(Nrow = NULL, Ncolumn = NULL,
Atag1 = "A", Atag2 = NULL,
Atag3 = NULL, Ntag1 = "N"){
#print(c(Atag1, Atag2 , Atag3, Ntag1))
nbr_location = which((df$row == Nrow) & (df$column == Ncolumn))
cell_location = which(df$row == Arow & df$column == Acolumn)
#print(c(c(Atag1, Atag2), c(Ntag1, 0)))
#if (identical(c(Atag1, Atag2), c(Ntag1, 0))){
if (identical(char_zero, nbr_location) == FALSE){
if(isTRUE((Atag1 == Ntag1) & (Atag2 == 0)  )){
df[cell_location, ]$PTR = df[nbr_location, ]$PTR  - cost
df[nbr_location, ]$PTR = df[nbr_location, ]$PTR + benefit
print(c(df[cell_location, ]$PTR, df[nbr_location, ]$PTR))
} else if(isTRUE((Atag1 != Ntag1) & identical(Atag3, 0) )){
df[cell_location, ]$PTR = df[nbr_location, ]$PTR  - cost
df[nbr_location, ]$PTR = df[nbr_location, ]$PTR + benefit
print(c(df[cell_location, ]$PTR, df[nbr_location, ]$PTR))
} else {
whatever = 1
}}
South_ID = c(ANSrow, ANScolumn, CAT, AT$tag2, AT$tag3,  CST)
West_ID = c(ANWrow, ANWcolumn, CAT, AT$tag2, AT$tag3,  CWT)
North_ID = c(ANNrow, ANNcolumn, CAT, AT$tag2, AT$tag3,  CNT)
East_ID = c(ANErow, ANEcolumn, CAT, AT$tag2, AT$tag3,  CET)
#print(South_ID)
#if (identical(char_zero, (c(South_ID, West_ID, North_ID, East_ID)) == FALSE)) {
NSI = interaction.function(Nrow = ANSrow, Ncolumn = ANScolumn, CAT, AT$tag2, AT$tag3,  CST)
NWI = interaction.function(Nrow = ANWrow, Ncolumn = ANWcolumn, CAT, AT$tag2, AT$tag3,  CWT)
NNI = interaction.function(Nrow = ANNrow, Ncolumn = ANNcolumn, CAT, AT$tag2, AT$tag3,  CNT)
NEI = interaction.function(Nrow = ANErow, Ncolumn = ANEcolumn, CAT, AT$tag2, AT$tag3,  CET)
#}
}
}
i = i+1
df_append <- cbind(df, i)
tsdf = rbind(tsdf,df_append)
}}
#png_files <- list.files("/Users/shashankpritam/Documents/qb_project", pattern = ".*png$", full.names = TRUE)
#gifski(png_files, gif_file = "matrix_animation.gif", width = 1800, height = 1500, delay = 1)
invisible(file.remove(list.files(pattern = "*.png")))
#result
print(tsdf)
write.csv(tsdf, "result.csv", row.names=TRUE)
library('plot.matrix')
library(gifski)
library(tensorr)
library('dplyr')
#Immigrant Variable Assigned
base_PTR = 0.12
cost = 0.01
benefit = 0.03
mutation_rate = 0.005
cell_size = 50
matrix_size = cell_size*cell_size
random_coop_defect = list(0, 1)
random_color = list("blue", "black", "green", "yellow")
char_zero <- character(0)
#The visual Matrix Created
Random_Matrix <- matrix(runif(matrix_size),nrow=cell_size)
Game_Matrix <- matrix(0, nrow = cell_size, ncol = cell_size)
Graph_Matrix <- matrix(nrow = cell_size, ncol = cell_size)
dim(Graph_Matrix)<-c(cell_size, cell_size)
#Transition Storage Dataframe (For all Generation) Initialized
tsdf <- data.frame(matrix(ncol = 8, nrow = 0))
colnames(tsdf) <- c('row', 'column', 'occupancy', 'tag1', 'tag2', 'tag3', 'PTR', 'gen')
# Temporary Storage Dataframe (For One Generation) Initialized
df <- data.frame(matrix(ncol = 7, nrow = 0))
colnames(df) <- c('row', 'column', 'occupancy', 'tag1', 'tag2', 'tag3', 'PTR')
i <- 0
gen <- 100
while (i < gen)
{
setwd('/Users/shashankpritam/Documents/qb_project')
# Setting Up Immigrant Tags
immigrant_tag_1_color = sample(random_color, 1, replace=TRUE)
immigrant_tag_2_same_color = sample(random_coop_defect, 1, replace=TRUE)
immigrant_tag_3_diff_color = sample(random_coop_defect, 1, replace=TRUE)
#Immigrant Placement in the Dataframe Begins
random_column = (sample((1:cell_size), size=1, replace=TRUE))
random_row = (sample((1:cell_size), size=1, replace=TRUE))
## Check if the cell is already occupied, if not, continue
new_im = paste(random_row, random_column, 1, sep=" ")
if (new_im %in% paste(df$row, df$column, df$occupancy, sep=" ") == FALSE)
{
df[nrow(df) + 1,] <- c(random_row, random_column, 1, immigrant_tag_1_color,
immigrant_tag_2_same_color, immigrant_tag_3_diff_color,
base_PTR)
#Immigrant Placement in the Matrix Begins
# if tag = 1, it implies defection or non-cooperation
if (immigrant_tag_2_same_color == 0 & immigrant_tag_3_diff_color == 0 ) {
Graph_Matrix[random_row, random_column] <- "Humanitarian"
} else if (immigrant_tag_2_same_color == 0 & immigrant_tag_3_diff_color == 1 ) {
Graph_Matrix[random_row, random_column] <- "Ethnocentric"
} else if (immigrant_tag_2_same_color == 1 & immigrant_tag_3_diff_color == 0 ) {
Graph_Matrix[random_row, random_column] <- "Traitor"
} else if (immigrant_tag_2_same_color == 1 & immigrant_tag_3_diff_color == 1 ) {
Graph_Matrix[random_row, random_column] <- "Selfish"
} else {
Graph_Matrix[random_row, random_column] <- "Null"
}
{name = paste('Matrix_',i,'_plot.png', sep='')}
png(name,width=9,height=7.5,units='in',res=400)
par(mar=c(5.1, 4.1, 4.1, 4.1),pty='s')
plot(Graph_Matrix, col=topo.colors, main = "Graph Matrix", xlab = "Cell", ylab = "Cell",)
dev.off()
par(mar=c(5.1, 4.1, 4.1, 4.1),pty='s')
plot(Graph_Matrix, col=topo.colors, main = "Graph Matrix", xlab = "Cell", ylab = "Cell",)
## Various Functions for Data Access
## Function to return occupancy of a cell
occupancy.function <- function(x, y) {
loc = paste(x, y, 1, sep=" ")
if (loc %in% paste(df$row, df$column, df$occupancy, sep=" ") == TRUE){
return (1)
} else {
return (0)
}
}
## Function to return tags of cell
tags.function <- function(x, y) {
return(filter(df, row == x & column == y & occupancy == 1))}
## Function to return the color of cell
color.function <- function (x ,y){
color = filter(df, row == x & column == y & occupancy == 1)$tag1
if (identical(char_zero, color) == TRUE){
color = "Empty"
return (color)
} else {
return (color)
}
}
# Start Roaming the Matrix by Checking Occupancy one by one
for(elements in rownames(df)){
Arow = (df[elements, "row"])
Acolumn = (df[elements, "column"])
if (Arow == cell_size){
ANSrow = 1
ANScolumn = Acolumn
} else {
ANSrow = Arow+1
ANScolumn = Acolumn}
if (Acolumn == 1){
ANWrow = Arow
ANWcolumn = cell_size
} else {
ANWrow = Arow
ANWcolumn = Acolumn-1}
if (Arow == 1){
ANNrow = cell_size
ANNcolumn = Acolumn
} else {
ANNrow = Arow-1
ANNcolumn = Acolumn}
if (Acolumn == cell_size){
ANErow = Arow
ANEcolumn = 1
} else {
ANErow = Arow
ANEcolumn = Acolumn+1}
#print(c(Arow, Acolumn, ANEcolumn))
AO = occupancy.function(Arow, Acolumn)
SO = occupancy.function(ANSrow, ANScolumn)
WO = occupancy.function(ANWrow, ANWcolumn)
NO = occupancy.function(ANNrow, ANNcolumn)
EO = occupancy.function(ANErow, ANEcolumn)
#print(c(AO, SO, WO, NO, EO))
CAT = color.function(Arow, Acolumn)
CST = color.function(ANSrow, ANScolumn)
CWT = color.function(ANWrow, ANWcolumn)
CNT = color.function(ANNrow, ANNcolumn)
CET = color.function(ANErow, ANEcolumn)
#print(c(CST, CWT, CNT, CET))
AT = tags.function(Arow, Acolumn)
ST = tags.function(ANSrow, ANScolumn)
WT = tags.function(ANWrow, ANWcolumn)
NT = tags.function(ANNrow, ANNcolumn)
ET = tags.function(ANErow, ANEcolumn)
interaction.function <- function(Nrow = NULL, Ncolumn = NULL,
Atag1 = "A", Atag2 = NULL,
Atag3 = NULL, Ntag1 = "N"){
nbr_location = which((df$row == Nrow) & (df$column == Ncolumn))
cell_location = which(df$row == Arow & df$column == Acolumn)
if (identical(char_zero, nbr_location) == FALSE){
if(isTRUE((Atag1 == Ntag1) & (Atag2 == 0)  )){
df[cell_location, ]$PTR = df[nbr_location, ]$PTR  - cost
df[nbr_location, ]$PTR = df[nbr_location, ]$PTR + benefit
print(c(df[cell_location, ]$PTR, df[nbr_location, ]$PTR))
} else if(isTRUE((Atag1 != Ntag1) & identical(Atag3, 0) )){
df[cell_location, ]$PTR = df[nbr_location, ]$PTR  - cost
df[nbr_location, ]$PTR = df[nbr_location, ]$PTR + benefit
print(c(df[cell_location, ]$PTR, df[nbr_location, ]$PTR))
} else {
whatever = 1
}}
South_ID = c(ANSrow, ANScolumn, CAT, AT$tag2, AT$tag3,  CST)
West_ID = c(ANWrow, ANWcolumn, CAT, AT$tag2, AT$tag3,  CWT)
North_ID = c(ANNrow, ANNcolumn, CAT, AT$tag2, AT$tag3,  CNT)
East_ID = c(ANErow, ANEcolumn, CAT, AT$tag2, AT$tag3,  CET)
#print(South_ID)
#if (identical(char_zero, (c(South_ID, West_ID, North_ID, East_ID)) == FALSE)) {
NSI = interaction.function(Nrow = ANSrow, Ncolumn = ANScolumn, CAT, AT$tag2, AT$tag3,  CST)
NWI = interaction.function(Nrow = ANWrow, Ncolumn = ANWcolumn, CAT, AT$tag2, AT$tag3,  CWT)
NNI = interaction.function(Nrow = ANNrow, Ncolumn = ANNcolumn, CAT, AT$tag2, AT$tag3,  CNT)
NEI = interaction.function(Nrow = ANErow, Ncolumn = ANEcolumn, CAT, AT$tag2, AT$tag3,  CET)
#}
}
}
i = i+1
df_append <- cbind(df, i)
tsdf = rbind(tsdf,df_append)
}
}
#png_files <- list.files("/Users/shashankpritam/Documents/qb_project", pattern = ".*png$", full.names = TRUE)
#gifski(png_files, gif_file = "matrix_animation.gif", width = 1800, height = 1500, delay = 1)
invisible(file.remove(list.files(pattern = "*.png")))
#result
print(tsdf)
write.csv(tsdf, "result.csv", row.names=TRUE)
library(ggplot2)
library(plyr)
library(patchwork)
library(ggpubr)
t_1<-read.table("validation_6_1_mhp", fill = TRUE, sep = "\t")
setwd("~/github/validinvadego/Simulation-Results/Insertion-Bias/validation_6")
library(ggplot2)
library(plyr)
library(patchwork)
library(ggpubr)
t_1<-read.table("validation_6_1_mhp", fill = TRUE, sep = "\t")
names(t_1)<-c("rep","gen","chr","pos","locus","popfreq")
t_1$rep<-as.factor(t_1$rep)
t_1$gen<-as.factor(t_1$gen)
t_1<-subset(t_1,rep==1)
t_1<-subset(t_1,gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_1<-ggplot(data=t_1,aes(x=pos))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
xlab("position")+ylab("counter per 10kb bin log10")+scale_y_log10()
plot(g_1)
t_2<-read.table("validation_6_2_mhp", fill = TRUE, sep = "\t")
names(t_2)<-c("rep","gen","chr","pos","locus","popfreq")
t_2$rep<-as.factor(t_2$rep)
t_2$gen<-as.factor(t_2$gen)
t_2<-subset(t_2,rep==1)
t_2<-subset(t_2,gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_2<-ggplot(data=t_2,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
xlab("position")+ylab("counter per 10kb bin")
plot(g_2)
t_2_2<-read.table("Raw/validation_6_2_mhp", fill = TRUE, sep = "\t")
t_2_2<-read.table("validation_6_2_mhp", fill = TRUE, sep = "\t")
names(t_2_2)<-c("rep","gen","chr","pos","locus","popfreq")
t_2_2$gen<-as.factor(t_2_2$gen)
t_2_2<-subset(t_2_2, gen==0)
g_2_2<-ggplot()+
geom_bar(data=t_2_2,aes(x = locus, y = (..count..)/sum(..count..), fill = locus))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(legend.position="none")
ylab("relative frequencies")
t_2_3<-read.table("validation_6_2_mhp", fill = TRUE, sep = "\t")
names(t_2_3)<-c("rep","gen","chr","pos","locus","popfreq")
t_2_3$gen<-as.factor(t_2_3$gen)
t_2_3<-subset(t_2_3, gen==100)
g_2_3<-ggplot()+
geom_bar(data=t_2_3,aes(x = locus, y = (..count..)/sum(..count..), fill = locus))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ylab("relative frequencies")
g_2_2+g_2_3
t_3<-read.table("validation_6_3_mhp", fill = TRUE, sep = "\t")
t_4<-read.table("validation_6_4_mhp", fill = TRUE, sep = "\t")
t_5<-read.table("validation_6_5_mhp", fill = TRUE, sep = "\t")
names(t_5)<-c("rep","gen","chr","pos","locus","popfreq")
t_5$rep<-as.factor(t_5$rep)
t_5$gen<-as.factor(t_5$gen)
t_5<-subset(t_5,rep==4)
t_5<-subset(t_5, gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_5<-ggplot(data=t_5,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
xlab("position")+ylab("counter per 10kb bin")
plot(g_5)
t_5_2<-read.table("Raw/validation_6_5_mhp", fill = TRUE, sep = "\t")
t_5_2<-read.table("validation_6_5_mhp", fill = TRUE, sep = "\t")
names(t_5_2)<-c("rep","gen","chr","pos","locus","popfreq")
t_5_2$gen<-as.factor(t_5_2$gen)
t_5_2<-subset(t_5_2, gen==0)
g_5_2<-ggplot()+
geom_bar(data=t_5_2,aes(x = locus, y = (..count..)/sum(..count..), fill = locus))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ylab("relative frequencies")
t_5_3<-read.table("Raw/validation_6_5_mhp", fill = TRUE, sep = "\t")
t_5_2<-read.table("validation_6_5_mhp", fill = TRUE, sep = "\t")
names(t_5_2)<-c("rep","gen","chr","pos","locus","popfreq")
t_5_2$gen<-as.factor(t_5_2$gen)
t_5_2<-subset(t_5_2, gen==0)
g_5_2<-ggplot()+
geom_bar(data=t_5_2,aes(x = locus, y = (..count..)/sum(..count..), fill = locus))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ylab("relative frequencies")
t_5_3<-read.table("validation_6_5_mhp", fill = TRUE, sep = "\t")
names(t_5_3)<-c("rep","gen","chr","pos","locus","popfreq")
t_5_3$gen<-as.factor(t_5_3$gen)
t_5_3<-subset(t_5_3, gen==100)
g_5_3<-ggplot()+
geom_bar(data=t_5_3,aes(x = locus, y = (..count..)/sum(..count..), fill = locus))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(legend.position="none")+
ylab("relative frequencies")
g_5_2+g_5_3
p<-c("#F8766D", "#619CFF", "#00BA38")
p_2<-c("#F8766D", "#00BA38", "#619CFF")
t_1_v2<-read.table("validation_v2_6_1_mhp", fill = TRUE, sep = "\t")
names(t_1_v2)<-c("rep","gen","chr","pos","locus","popfreq")
t_1_v2$locus <- factor(t_1_v2$locus, levels=c("noe", "clu", "par"))
t_1_v2$rep<-as.factor(t_1_v2$rep)
t_1_v2$gen<-as.factor(t_1_v2$gen)
t_1_v2<-subset(t_1_v2,rep==1)
t_1_v2<-subset(t_1_v2, gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_1_v2<-ggplot(data=t_1_v2,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
ggtitle("without host defence")+scale_color_manual(values = p)+
theme(legend.position="none")+
xlab("position")+ylab(" insertion sites [#/10kb]")
plot(g_1_v2)
p<-c("#A70909", "#619CFF", "#00BA38")
p_2<-c("#A70909", "#00BA38", "#619CFF")
t_1_v2<-read.table("validation_v2_6_1_mhp", fill = TRUE, sep = "\t")
names(t_1_v2)<-c("rep","gen","chr","pos","locus","popfreq")
t_1_v2$locus <- factor(t_1_v2$locus, levels=c("noe", "clu", "par"))
t_1_v2$rep<-as.factor(t_1_v2$rep)
t_1_v2$gen<-as.factor(t_1_v2$gen)
t_1_v2<-subset(t_1_v2,rep==1)
t_1_v2<-subset(t_1_v2, gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_1_v2<-ggplot(data=t_1_v2,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
ggtitle("without host defence")+scale_color_manual(values = p)+
theme(legend.position="none")+
xlab("position")+ylab(" insertion sites [#/10kb]")
plot(g_1_v2)
p<-c("#A70909", "#275A91", "#82C4A8")
p_2<-c("#A70909", "#82C4A8", "#275A91")
t_1_v2<-read.table("validation_v2_6_1_mhp", fill = TRUE, sep = "\t")
names(t_1_v2)<-c("rep","gen","chr","pos","locus","popfreq")
t_1_v2$locus <- factor(t_1_v2$locus, levels=c("noe", "clu", "par"))
t_1_v2$rep<-as.factor(t_1_v2$rep)
t_1_v2$gen<-as.factor(t_1_v2$gen)
t_1_v2<-subset(t_1_v2,rep==1)
t_1_v2<-subset(t_1_v2, gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_1_v2<-ggplot(data=t_1_v2,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
ggtitle("without host defence")+scale_color_manual(values = p)+
theme(legend.position="none")+
xlab("position")+ylab(" insertion sites [#/10kb]")
plot(g_1_v2)
t1_1v2
t1_1_v2
t_1_1_v2
t_1_v2
p<-c("#A70909", "#275A91", "#82C4A8")
p_2<-c("#A70909", "#82C4A8", "#275A91")
t_1_v2<-read.table("validation_v2_6_1_mhp", fill = TRUE, sep = "\t")
names(t_1_v2)<-c("rep","gen","chr","pos","locus","popfreq")
#t_1_v2$locus <- factor(t_1_v2$locus, levels=c("noe", "clu", "par"))
t_1_v2$rep<-as.factor(t_1_v2$rep)
t_1_v2$gen<-as.factor(t_1_v2$gen)
t_1_v2<-subset(t_1_v2,rep==1)
t_1_v2<-subset(t_1_v2, gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_1_v2<-ggplot(data=t_1_v2,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
ggtitle("without host defence")+scale_color_manual(values = p)+
theme(legend.position="none")+
xlab("position")+ylab(" insertion sites [#/10kb]")
plot(g_1_v2)
t_2_v2<-read.table("validation_v2_6_2_mhp", fill = TRUE, sep = "\t")
names(t_2_v2)<-c("rep","gen","chr","pos","locus","popfreq")
t_2_v2$locus <- factor(t_2_v2$locus, levels=c("noe", "clu", "par"))
t_2_v2$rep<-as.factor(t_2_v2$rep)
t_2_v2$gen<-as.factor(t_2_v2$gen)
t_2_v2<-subset(t_2_v2,rep==1)
t_2_v2<-subset(t_2_v2, gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_2_v2<-ggplot(data=t_2_v2,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
ggtitle("piRNA clusters")+scale_fill_manual(values = p)+
theme(legend.position="none")+
xlab("position")+ylab(" insertion sites [#/10kb]")
plot(g_2_v2)
t_3_v2<-read.table("validation_v2_6_3_mhp", fill = TRUE, sep = "\t")
t_4_v2<-read.table("validation_v2_6_4_mhp", fill = TRUE, sep = "\t")
names(t_4_v2)<-c("rep","gen","chr","pos","locus","popfreq")
t_4_v2$locus <- factor(t_4_v2$locus, levels=c("noe", "par", "clu"))
t_4_v2$rep<-as.factor(t_4_v2$rep)
t_4_v2$gen<-as.factor(t_4_v2$gen)
t_4_v2<-subset(t_4_v2,rep==1)
t_4_v2<-subset(t_4_v2, gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_4_v2<-ggplot(data=t_4_v2,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
ggtitle("piRNA clusters + selection")+scale_fill_manual(values = p)+
theme(legend.position="none")+
xlab("position")+ylab(" insertion sites [#/10kb]")
plot(g_4_v2)
ggarrange(g_1_v2, g_2_v2, g_3_v2, g_4_v2,
ncol = 2, nrow = 2, align = ("v"),
labels = c("A", "B", "C", "D"), heights = c(2,2), widths = c(2,2)
)
setwd("~/github/validinvadego/Simulation-Results/Insertion-Bias/validation_7")
t_1<-read.table("validation_7_1_mhp", fill = TRUE, sep = "\t")
names(t_1)<-c("rep","gen","chr","pos","locus","popfreq")
t_1$rep<-as.factor(t_1$rep)
t_1$gen<-as.factor(t_1$gen)
t_1<-subset(t_1,rep==10)
t_1<-subset(t_1,gen==0 | gen==25 | gen==50)
g_1<-ggplot(data=t_1,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
xlab("position")+ylab("counter per 10kb bin")
plot(g_1)
t_1_2<-read.table("validation_7_1_mhp", fill = TRUE, sep = "\t")
names(t_1_2)<-c("rep","gen","chr","pos","locus","popfreq")
t_1_2$gen<-as.factor(t_1_2$gen)
t_1_2<-subset(t_1_2, gen==0)
g_1_2<-ggplot()+
geom_bar(data=t_1_2,aes(x = locus, y = (..count..)/sum(..count..), fill = locus))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ggtitle("Generation 0")+
theme(legend.position="none", plot.title = element_text(size=14, face="bold.italic"))+
ylab("relative frequencies")
t_1_3<-read.table("validation_7_1_mhp", fill = TRUE, sep = "\t")
names(t_1_3)<-c("rep","gen","chr","pos","locus","popfreq")
t_1_3$gen<-as.factor(t_1_3$gen)
t_1_3<-subset(t_1_3, gen==50)
g_1_3<-ggplot()+
geom_bar(data=t_1_3,aes(x = locus, y = (..count..)/sum(..count..), fill = locus))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ggtitle("Generation 50")+
theme(plot.title = element_text(size=14, face="bold.italic"))+
ylab("relative frequencies")
g_1_2+g_1_3
t_2<-read.table("Raw/validation_7_2_mhp", fill = TRUE, sep = "\t")
t_2<-read.table("validation_7_2_mhp", fill = TRUE, sep = "\t")
names(t_2)<-c("rep","gen","chr","pos","locus","popfreq")
t_2$rep<-as.factor(t_2$rep)
t_2$gen<-as.factor(t_2$gen)
t_2<-subset(t_2,rep==1)
t_2<-subset(t_2,gen==0 | gen==25 | gen==50 | gen==75 | gen==100)
g_2<-ggplot(data=t_2,aes(x=pos, fill=locus))+geom_histogram(binwidth=10000)+facet_grid(gen~chr, scales="free_x", space = "free_x")+
scale_x_continuous(breaks=c(0,500000,1000000,1500000),labels=c("0","0.5m","1m","1.5m"))+
xlab("position")+ylab("counter per 10kb bin")
plot(g_2)
t_2_2<-read.table("validation_7_2_mhp", fill = TRUE, sep = "\t")
names(t_2_2)<-c("rep","gen","chr","pos","locus","popfreq")
t_2_2$gen<-as.factor(t_2_2$gen)
t_2_2<-subset(t_2_2, gen==0)
g_2_2<-ggplot()+
geom_bar(data=t_2_2,aes(x = locus, y = (..count..)/sum(..count..), fill = locus))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ggtitle("Generation 0")+
theme(legend.position="none", plot.title = element_text(size=14, face="bold.italic"))+
ylab("relative frequencies")
t_2_3<-read.table("validation_7_2_mhp", fill = TRUE, sep = "\t")
names(t_2_3)<-c("rep","gen","chr","pos","locus","popfreq")
t_2_3$gen<-as.factor(t_2_3$gen)
t_2_3<-subset(t_2_3, gen==100)
g_2_3<-ggplot()+
geom_bar(data=t_2_3,aes(x = locus, y = (..count..)/sum(..count..), fill = locus))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ggtitle("Generation 100")+
theme(plot.title = element_text(size=14, face="bold.italic"))+
ylab("relative frequencies")
g_2_2+g_2_3
df_sel<-read.table("Raw/2022_08_05_Validation_7_Selection", fill = TRUE, sep = "\t")
df_sel<-read.table("2023_02_27_Validation_7_Selection", fill = TRUE, sep = "\t")
D0 = 0.25
Dnc_0.00<-((1-0.00)**(0:150))*D0
Dnc_0.01<-((1-0.01)**(0:150))*D0
Dnc_0.05<-((1-0.05)**(0:150))*D0
Dnc_0.1<-((1-0.1)**(0:150))*D0
Dnc_0.5<-((1-0.5)**(0:150))*D0
gen = c(0:150)
df<- data.frame(Dnc_0.00, Dnc_0.01, Dnc_0.05, Dnc_0.1, Dnc_0.5, gen)
gl<-ggplot(df, aes( x = gen))+
geom_line(aes(y = Dnc_0.00), color = "blue")+
geom_line(aes(y = Dnc_0.01), color = "green")+
geom_line(aes(y = Dnc_0.05), color = "yellow")+
geom_line(aes(y = Dnc_0.1), color = "orange")+
geom_line(aes(y = Dnc_0.5), color = "red")+
geom_label(aes(x = 48.5, y = 0.25,label = "c = 0.00"))+
geom_label(aes(x = 30, y = 0.185,label = "c = 0.01"))+
geom_label(aes(x = 18.5, y = 0.10,label = "c = 0.05"))+
geom_label(aes(x = 12, y = 0.07,label = "c = 0.1"))+
geom_label(aes(x = 4, y = 0.02,label = "c = 0.5"))+
xlim(0,50)+
ylab("D Linkage disequilibrium")+xlab("generation")
plot(gl)
